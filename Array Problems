#Sort an Array using Recursion.

#include <iostream>
using namespace std;

bool Sorted(int arr[], int n){
    if(n ==1){
        return true;
    }
    bool restArray = Sorted(arr+1, n-1);
    return(arr[0]<arr[1] && restArray);
}
int main() {
    int arr[] = {2,4,6,8,11,12,14};
    std::cout << Sorted(arr,7);
	// your code goes here
	return 0;
}



Kadane Algo to find MaxSum in sub-Arrays

#include <iostream>
#include <climits>

using namespace std;

int main() {
    int n; std::cin >> n;
    int arr[n];
    for(int i =0; i<n; i++){
        cin>>arr[i];
    }
    int CurrSum = 0;
    int MaxSum = INT_MIN;
    for(int i =0; i<n; i++){
        CurrSum += arr[i];
        if(CurrSum <0){
            CurrSum =0;
        }
        MaxSum = max(CurrSum, MaxSum);
    }
    std::cout << MaxSum << std::endl;
	// your code goes here
	return 0;
}
		Maxisum of Circular SUB-ARRAY
		
		
#include <iostream>
#include <climits>
using namespace std;

int kadane(int arr[], int n){
    int currSum = 0;
    int Maxsum = INT_MIN;
    for(int i = 0; i<n; i++){
        currSum += arr[i];
        if(currSum<0){
            currSum =0;
        }
        Maxsum = max(currSum, Maxsum);
    }
    return Maxsum;
    
}
int main() {
    int n; std::cin >> n;
    int arr[n];
    for(int i = 0; i<n; i++){
        cin>>arr[i];
    }
    int wrapsum;
    int nonwrapSum;
    nonwrapSum = kadane(arr,n);
    int totalSum = 0;
    for(int i = 0; i<n; i++){
        totalSum += arr[i];
        arr[i] = -arr[i];
    }
    wrapsum = totalSum + kadane(arr,n);
    std::cout << max(wrapsum, nonwrapSum) << std::endl;
	// your code goes here
	return 0;
}




	Pairsum element find in an ARRAY.(Optimised Solutions)(n)
	
	
#include <iostream>
using namespace std;

bool PairSum(int arr[], int n, int key){
   int low = 0;
   int hgh = n-1;
   while(low<hgh){
       if(arr[low] + arr[hgh] == key){
           cout<<low<<" "<<hgh<<endl;
           return true;
       }
       else if(arr[low] + arr[hgh] > key){
           hgh--;
       }
       else{
           low++;
       }
   }
   return false;
}

int main() {
    int n; std::cin >> n;
    int arr[n];
    for(int i=0; i<n; i++){
        cin>>arr[i];
    }
    int key; cin>>key;
    
    std::cout << PairSum(arr, n, key) << std::endl;
	// your code goes here
	return 0;
}

